// File generated by dotnet-combine at 2022-09-25__03_00_33

using CMakeUnreal;
using static System.Net.Mime.MediaTypeNames;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection.Metadata.Ecma335;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
using UnrealBuildTool;




public class CMakeUnreal
    : ModuleRules
{
    public CMakeUnreal(ReadOnlyTargetRules Target)
        : base(Target)
    {
        PublicDependencyModuleNames.AddRange(new string[] { "Core", "Engine", "InputCore" });
        PrivateDependencyModuleNames.AddRange(new string[] { "CoreUObject", "Engine" });
    }
}


// Source\CMake\ICMakeBuild.cs
namespace CMakeUnreal
{
    public abstract class ICMakeBuild
    {
        protected const string _program = "cmake.exe";
        protected void Build(ICMakeBuildConfiguration conf, CMakeProjectWindows proj)
        {
            conf.BuildDir = string.Format(conf.BuildDir, proj.ProjectName);
            string buildPath = System.IO.Path.Combine(conf.ThirdPartyPath, "Generated", conf.BuildDir);
            string installPath = buildPath;

            int retCode = 0;
            //string buildCommand1 = CreateCMakeBuildCommand(buildPath);
            string buildCommand = CreateCMakeBuildCommand(buildPath, installPath);
            retCode = ExecuteCommandSync(buildCommand, conf.WorkingDir);
            if (retCode != 0)
                Console.WriteLine($@"Cannot configure CMake project. Exited with code: {retCode}");

            string installCommand = CreateCMakeInstallCommand(conf.ThirdPartyPath, conf.BuildDir, proj.BuildType);
            retCode = ExecuteCommandSync(installCommand, conf.WorkingDir);
            if (retCode != 0)
                Console.WriteLine($@"Cannot build project. Exited with code: {retCode}");

        }

        protected int ExecuteCommandSync(string command, string? workingDir)
        {
            Console.WriteLine("Running: " + command);
            System.Diagnostics.ProcessStartInfo processInfo = new ProcessStartInfo("cmd.exe", "/c " + command)
            {
                CreateNoWindow = true,
                UseShellExecute = false,
                RedirectStandardError = true,
                RedirectStandardOutput = true,
                WorkingDirectory = workingDir
            };

            StringBuilder sb = new StringBuilder();
            Process? p = Process.Start(processInfo);
            if (p == null)
            {
                Console.WriteLine($"Failed to {0} create process!", "cmd");
                return -1;
            }


            p.OutputDataReceived += (sender, args) => Console.WriteLine(args.Data);
            p.BeginOutputReadLine();
            p.WaitForExit();

            return p.ExitCode;
        }

        public abstract string CreateCMakeBuildCommand(string buildDirectory, string installPath);

        public abstract string CreateCMakeInstallCommand(string thirdPartyPath, string buildDirectory, string buildType);
    }
}


// Source\CMake\ICMakeBuildConfiguration.cs
namespace CMakeUnreal
{
    public record ICMakeBuildConfiguration
    {
        public string BuildDir = "";
        public string InstallPath = "";
        public string ThirdPartyPath = "";
        public string WorkingDir = "";
        public string BuildType = "";
    }
}


// Source\CMake\ICMakeProject.cs
namespace CMakeUnreal
{
    public enum SystemArch
    {
        x86,
        x64,
        Android
    }

    public record ICMakeProject
    {
        public string ProjectName   = "";
        public string ProjectSource = "";
        public string BuildType     = "";
        public string Generator     = "";
    }
}


// Source\CMake\Main.cs
namespace CMakeUnreal
{
    public class CMakeUnreal
    {
        public static void Main(string[] args)
        {

        }
    }
}

// Source\CMake\Windows\CMakeBuildConfigurationWindows.cs
namespace CMakeUnreal
{
    public record CMakeBuildConfigurationWindows
        : ICMakeBuildConfiguration
    {
        public CMakeBuildConfigurationWindows(string buildDir, string installPath, string thirdPartyPath, string workingDir, string buildType)
        {
            BuildDir = buildDir;
            InstallPath = installPath;
            ThirdPartyPath = thirdPartyPath;
            WorkingDir = workingDir;
            BuildType = buildType;
        }
    }
}


// Source\CMake\Windows\CMakeBuildWindows.cs
namespace CMakeUnreal
{
    public class CMakeBuildWindows
        : ICMakeBuild
    {
        private CMakeBuildConfigurationWindows _config;
        private CMakeProjectWindows _project;

        public CMakeBuildWindows(CMakeBuildConfigurationWindows config, CMakeProjectWindows proj)
        {
            _config = config;
            _project = proj;
            string command = CreateCMakeBuildCommand(config.BuildDir, config.InstallPath);
            ExecuteCommandSync(command, proj.ProjectSource);
        }

        public override string CreateCMakeBuildCommand(string buildDirectory, string installPath)
        {
            string arguments = $@"-G {_project.Generator} " +
                                $@"-S {"\""}{_project.ProjectSource}{"\""} " +
                                $@"-B {"\""}{_config.BuildDir}{"\""} " +
                                $@"-A {_project.Arch.ToString()} " +
                                $@"-T host={_project.Arch.ToString()} " +
                                $@"-DCMAKE_BUILD_TYPE={_project.BuildType} " +
                                $@"-DCMAKE_INSTALL_PREFIX={_config.InstallPath}" +
                                "-MD";

            return ICMakeBuild._program + " " + arguments;
        }

        public override string CreateCMakeInstallCommand(string thirdPartyPath, string buildDirectory, string buildType)
        {
            return $@"{_program} --build {"\""}{Path.Combine(thirdPartyPath, "Generated", buildDirectory)}{"\""} " +
                   $@"--target install " +
                   $@"--config {buildType} ";
        }
    }
}

// Source\CMake\Windows\CMakeProjectWindows.cs
namespace CMakeUnreal
{

    public record CMakeProjectWindows
        : ICMakeProject
    {
        public CMakeProjectWindows(string projectName, string projectSource, string buildType = "\"Release\"", string generator = "\"Visual Studio 17 2022\"", SystemArch arch = SystemArch.x64)
        {
            ProjectName = projectName;
            ProjectSource = projectSource;
            BuildType = buildType;
            Generator = generator;
            _architecture = arch;
        }

        public string Arch
        {
            get { return $@"{_architecture.ToString()}"; }
        }

        protected SystemArch _architecture = SystemArch.x64;
    }
}


// Source\CMake\Android\CMakeBuildAndroid.cs
namespace CMakeUnreal.Android
{
    public class CMakeBuildAndroid
        : ICMakeBuild
    {
        private CMakeBuildConfigurationAndroid _config;
        private CMakeProjectAndroid _project;

        public CMakeBuildAndroid(CMakeBuildConfigurationAndroid config, CMakeProjectAndroid proj)
        {
            _config = config;
            _project = proj;
            string command = CreateCMakeBuildCommand(config.BuildDir, config.InstallPath);
            ExecuteCommandSync(command, proj.ProjectSource);

            string install = CreateCMakeInstallCommand(_config.ThirdPartyPath, _config.BuildDir, _project.BuildType);
            ExecuteCommandSync(install, _config.ThirdPartyPath);
        }

        public override string CreateCMakeBuildCommand(string buildDirectory, string installPath)
        {
            string arguments = $@"-G {"\""}{_project.Generator}{"\""} " +
                                $@"-S {"\""}{_project.ProjectSource}{"\""} " +
                                $@"-B {"\""}{_config.BuildDir}{"\""} " +
                                $@"-DCMAKE_TOOLCHAIN_FILE={"\""}{_config.android_toolchain_path}{"\""} " +
                                $@"-DCMAKE_BUILD_TYPE={_project.BuildType} " +
                                $@"-DCMAKE_INSTALL_PREFIX={"\""}{_config.InstallPath}{"\""}";

            return ICMakeBuild._program + " " + arguments;
        }

        public override string CreateCMakeInstallCommand(string thirdPartyPath, string buildDirectory, string buildType)
        {
            return $@"{_program} --build {"\""}{Path.Combine(thirdPartyPath, "Generated", buildDirectory)}{"\""} " +
                   $@"--target install " +
                   $@"--config {buildType} ";
        }
    }
}

// Source\CMake\Android\CMakeBuildConfigurationAndroid.cs
namespace CMakeUnreal.Android
{
    public record CMakeBuildConfigurationAndroid
        : ICMakeBuildConfiguration
    {
        public CMakeBuildConfigurationAndroid(string buildDir, string installPath, string thirdPartyPath, string workingDir, string buildType, string androidNDKPath, string androidToolchain = "android.toolchain.cmake")
        {
            BuildDir = buildDir;
            InstallPath = installPath;
            ThirdPartyPath = thirdPartyPath;
            WorkingDir = workingDir;
            BuildType = buildType;
            android_ndk_path = androidNDKPath;
            android_toolchain_path = System.IO.Path.Combine(android_ndk_path, androidToolchain);
        }

        public string android_ndk_path;
        public string android_toolchain_path;
    }
}


// Source\CMake\Android\CMakeProjectAndroid.cs
namespace CMakeUnreal.Android
{
    public record CMakeProjectAndroid
        : ICMakeProject
    {
        public CMakeProjectAndroid(string projectName, string projectSource, string androidNdkPath, string toolchain = "android.toolchain.cmake",string androidAbi = "", string buildType = "\"Release\"", string generator = "MinGW Makefiles", SystemArch arch = SystemArch.Android)
        {
            ProjectName = projectName;
            ProjectSource = projectSource;
            BuildType = buildType;
            Generator = generator;
            android_abi = androidAbi;
        }

        public string android_abi { get; set; }
    }
}

